// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/mcp.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MCPService_GetCrioConfig_FullMethodName      = "/mcp.MCPService/GetCrioConfig"
	MCPService_GetRuntimeStatus_FullMethodName   = "/mcp.MCPService/GetRuntimeStatus"
	MCPService_ListContainers_FullMethodName     = "/mcp.MCPService/ListContainers"
	MCPService_InspectContainer_FullMethodName   = "/mcp.MCPService/InspectContainer"
	MCPService_GetContainerStats_FullMethodName  = "/mcp.MCPService/GetContainerStats"
	MCPService_GetContainerConfig_FullMethodName = "/mcp.MCPService/GetContainerConfig"
)

// MCPServiceClient is the client API for MCPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MCPServiceClient interface {
	GetCrioConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CrioConfigResponse, error)
	GetRuntimeStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RuntimeStatusResponse, error)
	ListContainers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ContainersResponse, error)
	InspectContainer(ctx context.Context, in *ContainerRequest, opts ...grpc.CallOption) (*ContainerInspectResponse, error)
	GetContainerStats(ctx context.Context, in *ContainerRequest, opts ...grpc.CallOption) (*ContainerStatsResponse, error)
	GetContainerConfig(ctx context.Context, in *ContainerRequest, opts ...grpc.CallOption) (*ContainerConfigResponse, error)
}

type mCPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMCPServiceClient(cc grpc.ClientConnInterface) MCPServiceClient {
	return &mCPServiceClient{cc}
}

func (c *mCPServiceClient) GetCrioConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CrioConfigResponse, error) {
	out := new(CrioConfigResponse)
	err := c.cc.Invoke(ctx, MCPService_GetCrioConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPServiceClient) GetRuntimeStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RuntimeStatusResponse, error) {
	out := new(RuntimeStatusResponse)
	err := c.cc.Invoke(ctx, MCPService_GetRuntimeStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPServiceClient) ListContainers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ContainersResponse, error) {
	out := new(ContainersResponse)
	err := c.cc.Invoke(ctx, MCPService_ListContainers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPServiceClient) InspectContainer(ctx context.Context, in *ContainerRequest, opts ...grpc.CallOption) (*ContainerInspectResponse, error) {
	out := new(ContainerInspectResponse)
	err := c.cc.Invoke(ctx, MCPService_InspectContainer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPServiceClient) GetContainerStats(ctx context.Context, in *ContainerRequest, opts ...grpc.CallOption) (*ContainerStatsResponse, error) {
	out := new(ContainerStatsResponse)
	err := c.cc.Invoke(ctx, MCPService_GetContainerStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPServiceClient) GetContainerConfig(ctx context.Context, in *ContainerRequest, opts ...grpc.CallOption) (*ContainerConfigResponse, error) {
	out := new(ContainerConfigResponse)
	err := c.cc.Invoke(ctx, MCPService_GetContainerConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MCPServiceServer is the server API for MCPService service.
// All implementations must embed UnimplementedMCPServiceServer
// for forward compatibility
type MCPServiceServer interface {
	GetCrioConfig(context.Context, *Empty) (*CrioConfigResponse, error)
	GetRuntimeStatus(context.Context, *Empty) (*RuntimeStatusResponse, error)
	ListContainers(context.Context, *Empty) (*ContainersResponse, error)
	InspectContainer(context.Context, *ContainerRequest) (*ContainerInspectResponse, error)
	GetContainerStats(context.Context, *ContainerRequest) (*ContainerStatsResponse, error)
	GetContainerConfig(context.Context, *ContainerRequest) (*ContainerConfigResponse, error)
	mustEmbedUnimplementedMCPServiceServer()
}

// UnimplementedMCPServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMCPServiceServer struct {
}

func (UnimplementedMCPServiceServer) GetCrioConfig(context.Context, *Empty) (*CrioConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCrioConfig not implemented")
}
func (UnimplementedMCPServiceServer) GetRuntimeStatus(context.Context, *Empty) (*RuntimeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuntimeStatus not implemented")
}
func (UnimplementedMCPServiceServer) ListContainers(context.Context, *Empty) (*ContainersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContainers not implemented")
}
func (UnimplementedMCPServiceServer) InspectContainer(context.Context, *ContainerRequest) (*ContainerInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspectContainer not implemented")
}
func (UnimplementedMCPServiceServer) GetContainerStats(context.Context, *ContainerRequest) (*ContainerStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainerStats not implemented")
}
func (UnimplementedMCPServiceServer) GetContainerConfig(context.Context, *ContainerRequest) (*ContainerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainerConfig not implemented")
}
func (UnimplementedMCPServiceServer) mustEmbedUnimplementedMCPServiceServer() {}

// UnsafeMCPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MCPServiceServer will
// result in compilation errors.
type UnsafeMCPServiceServer interface {
	mustEmbedUnimplementedMCPServiceServer()
}

func RegisterMCPServiceServer(s grpc.ServiceRegistrar, srv MCPServiceServer) {
	s.RegisterService(&MCPService_ServiceDesc, srv)
}

func _MCPService_GetCrioConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).GetCrioConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_GetCrioConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).GetCrioConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCPService_GetRuntimeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).GetRuntimeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_GetRuntimeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).GetRuntimeStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCPService_ListContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).ListContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_ListContainers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).ListContainers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCPService_InspectContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).InspectContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_InspectContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).InspectContainer(ctx, req.(*ContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCPService_GetContainerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).GetContainerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_GetContainerStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).GetContainerStats(ctx, req.(*ContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCPService_GetContainerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).GetContainerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_GetContainerConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).GetContainerConfig(ctx, req.(*ContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MCPService_ServiceDesc is the grpc.ServiceDesc for MCPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MCPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcp.MCPService",
	HandlerType: (*MCPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCrioConfig",
			Handler:    _MCPService_GetCrioConfig_Handler,
		},
		{
			MethodName: "GetRuntimeStatus",
			Handler:    _MCPService_GetRuntimeStatus_Handler,
		},
		{
			MethodName: "ListContainers",
			Handler:    _MCPService_ListContainers_Handler,
		},
		{
			MethodName: "InspectContainer",
			Handler:    _MCPService_InspectContainer_Handler,
		},
		{
			MethodName: "GetContainerStats",
			Handler:    _MCPService_GetContainerStats_Handler,
		},
		{
			MethodName: "GetContainerConfig",
			Handler:    _MCPService_GetContainerConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mcp.proto",
}
